using System;
using System.Linq;
using SnmpSharpNet;

namespace AvoREPL
{
    class Program
    {
        static void Main(string[] args)
        {

            while (true)
            {
                Console.Write("> ");
                var cmd = Console.ReadLine();
                var parts = cmd.Split();

                try
                {
                    switch (parts.First().ToLower())
                    {
                    case "discover":
                        {
                            var ip = System.Net.IPAddress.Parse(parts[1].ToLower());
                            var appliance = new AvoCommLib.Appliance();
                            appliance.IPAddress = ip;
                            appliance.Discover();
                        }
                        break;

                    case "snmp":
                        {
                            var ip = System.Net.IPAddress.Parse(parts[1].ToLower());
                            var oid = new Oid(parts[2]);

                            var vb = new Vb(oid);

                            var aidp = new AvoCommLib.Protocols.AIDP(ip);

                            var ret = aidp.SnmpGet(oid);
                            ret.Wait();

                            Console.WriteLine($"{oid}: {ret.Result.Value}");
                        }
                        break;

                    default:
                        Console.WriteLine($"Unknown input: \"{parts.First()}\"");
                        goto case "help";

                    case "help":
                        Console.WriteLine("Available commands:");
                        Console.WriteLine();
                        Console.WriteLine("- help");
                        Console.WriteLine("- discover IP");
                        break;
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex);
                }
            }


            // var ret = AvoCommLib.Util.SNMP.DecodeVarBindList(new byte[]
            // {
/*
// Request
0x03, 0x00, 0x36, 0x06, 0x00, 0x30, 0x00, 0x00,
0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x28, 0xb2, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00,
0x00, 0xff, 0x0d
*/

/*
// Response
0x01, 0x00, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02,
0x00, 0x01, 0x03, 0x00, 0x36, 0x06, 0x00, 0x30, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03,
0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01,
0x00, 0x00, 0x28, 0xb2, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01,
0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0xff, 0x0d
*/

/*
// Request
0x01, 0x00, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02,
0x00, 0x01, 0x03, 0x00, 0x36, 0x06, 0x00, 0x30, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03,
0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01,
0x00, 0x00, 0x28, 0xb2, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01,
0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0xff, 0x0d
*/
            // });
            // Console.WriteLine(ret);
        }
    }
}
